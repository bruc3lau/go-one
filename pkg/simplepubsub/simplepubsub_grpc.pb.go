// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: simplepubsub/simplepubsub.proto

package simplepubsub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Publisher_Subscribe_FullMethodName = "/simplepubsub.Publisher/Subscribe"
)

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	// 客户端调用此方法进行订阅，服务端会以流的形式返回消息
	Subscribe(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Publisher_SubscribeClient, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Subscribe(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Publisher_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Publisher_ServiceDesc.Streams[0], Publisher_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Publisher_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type publisherSubscribeClient struct {
	grpc.ClientStream
}

func (x *publisherSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	// 客户端调用此方法进行订阅，服务端会以流的形式返回消息
	Subscribe(*ClientInfo, Publisher_SubscribeServer) error
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) Subscribe(*ClientInfo, Publisher_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s grpc.ServiceRegistrar, srv PublisherServer) {
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublisherServer).Subscribe(m, &publisherSubscribeServer{stream})
}

type Publisher_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type publisherSubscribeServer struct {
	grpc.ServerStream
}

func (x *publisherSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// Publisher_ServiceDesc is the grpc.ServiceDesc for Publisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simplepubsub.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Publisher_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simplepubsub/simplepubsub.proto",
}
